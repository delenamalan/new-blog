(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{384:function(e,t,a){"use strict";a.r(t);var o=a(42),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"nine-things-you-need-to-remember-when-using-composer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nine-things-you-need-to-remember-when-using-composer"}},[e._v("#")]),e._v(" Nine things you need to remember when using Composer")]),e._v(" "),a("DateComponent",{attrs:{page:e.$page}}),e._v(" "),a("p",[e._v("When I started using "),a("a",{attrs:{href:"https://getcomposer.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Composer"),a("OutboundLink")],1),e._v(" I hardly noticed I was using it until it gave me problems. Now that I've used Laravel for a while, I'm realising how much I've been neglecting Composer! Composer can be super handy and easy to use once you've learned a few of its tricks. Here are a few of the things that help me work more effectively with Composer:")]),e._v(" "),a("h2",{attrs:{id:"_1-remember-the-difference-between-composer-install-and-composer-update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-remember-the-difference-between-composer-install-and-composer-update"}},[e._v("#")]),e._v(" 1. Remember the difference between "),a("code",[e._v("composer install")]),e._v(" and "),a("code",[e._v("composer update")])]),e._v(" "),a("p",[e._v("This is probably the most important concept you need to understand about Composer. On the surface "),a("code",[e._v("composer install")]),e._v(" and "),a("code",[e._v("composer update")]),e._v(" look very similar. Both can modify the packages and/or their versions in your "),a("code",[e._v("vendor")]),e._v(" folder. However, they have some subtle though very important differences. Here are three different explanations to help you remember their differences:")]),e._v(" "),a("h3",{attrs:{id:"_1-1-tldr-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-tldr-1"}},[e._v("#")]),e._v(" 1.1 TLDR 1")]),e._v(" "),a("p",[e._v("Run "),a("code",[e._v("composer install")]),e._v(" when you first create or clone a project, after you've switched to another branch or pulled changes from a remote. Run "),a("code",[e._v("composer update")]),e._v(" when you want to install new requirements or update your current dependencies to their latest available versions.")]),e._v(" "),a("h3",{attrs:{id:"_1-2-tldr-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-tldr-2"}},[e._v("#")]),e._v(" 1.2 TLDR 2")]),e._v(" "),a("p",[e._v("Run "),a("code",[e._v("composer install")]),e._v(" when your "),a("code",[e._v("composer.lock")]),e._v(" file has changed or when you don't have a "),a("code",[e._v("composer.lock")]),e._v(" file. Run "),a("code",[e._v("composer update")]),e._v(" when the "),a("code",[e._v("composer.json")]),e._v(" file has changed or when you want to update your dependencies to their latest available versions.")]),e._v(" "),a("h3",{attrs:{id:"_1-3-longer-explanation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-longer-explanation"}},[e._v("#")]),e._v(" 1.3 Longer explanation")]),e._v(" "),a("p",[a("code",[e._v("composer install")]),e._v(" lets you install your initial set of dependencies when no "),a("code",[e._v("composer.lock")]),e._v(" file exists. It uses your "),a("code",[e._v("composer.json")]),e._v(" file to resolve a set of compatible package versions and installs them into the "),a("code",[e._v("vendor")]),e._v(" directory. It will create a "),a("code",[e._v("composer.lock")]),e._v(" file which would contain the exact package versions that it has installed.")]),e._v(" "),a("p",[e._v("When the "),a("code",[e._v("composer.lock")]),e._v(" file exists, "),a("code",[e._v("composer install")]),e._v(" ignores the "),a("code",[e._v("composer.json")]),e._v(" file and simply installs the exact same packages and versions that the file contains. Even if your "),a("code",[e._v("composer.json")]),e._v(" file contains new package dependencies Composer will ignore them. That is where "),a("code",[e._v("composer update")]),e._v(" comes in...")]),e._v(" "),a("p",[a("code",[e._v("composer update")]),e._v(" basically does the same that "),a("code",[e._v("composer install")]),e._v(" did when there were no "),a("code",[e._v("composer.lock")]),e._v(" file yet. In fact, this block in the Composer "),a("a",{attrs:{href:"https://github.com/composer/composer/blob/master/src/Composer/Installer.php#L184",target:"_blank",rel:"noopener noreferrer"}},[e._v("source"),a("OutboundLink")],1),e._v(' shows us that it is actually an "update" that is being done when no '),a("code",[e._v("composer.lock")]),e._v(" file exists:")]),e._v(" "),a("div",{staticClass:"language-php line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Force update if there is no lock file present")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),a("span",{pre:!0,attrs:{class:"token property"}},[e._v("update")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),a("span",{pre:!0,attrs:{class:"token property"}},[e._v("locker")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("isLocked")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),a("span",{pre:!0,attrs:{class:"token property"}},[e._v("update")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean constant"}},[e._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[a("code",[e._v("composer update")]),e._v(" will look at your "),a("code",[e._v("composer.json")]),e._v(" file again and resolve the latest versions of all the package requirements, install them to your "),a("code",[e._v("vendor")]),e._v(" folder and overwrite your "),a("code",[e._v("composer.lock")]),e._v(" file. If you've removed any package dependencies from your "),a("code",[e._v("composer.json")]),e._v(" it will uninstall them.")]),e._v(" "),a("p",[e._v("One last thing: "),a("code",[e._v("composer upgrade")]),e._v(" is just an alias for "),a("code",[e._v("composer update")]),e._v(", so you don't need to worry about it if you know "),a("code",[e._v("composer update")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"_2-never-run-composer-as-sudo-root"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-never-run-composer-as-sudo-root"}},[e._v("#")]),e._v(" 2. Never run Composer as sudo/root")]),e._v(" "),a("p",[e._v("Some composer packages contains scripts that Composer will run, and if you run Composer as sudo these scripts can do anything that you can do as a sudo user. Scary stuff!")]),e._v(" "),a("p",[e._v("Even though Composer shows a warning when you try to run composer as root and has a dedicated FAQ "),a("a",{attrs:{href:"https://getcomposer.org/doc/faqs/how-to-install-untrusted-packages-safely.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("page"),a("OutboundLink")],1),e._v(" about it, many people (including my former self!) run composer as root. Unfortunately that FAQ page doesn't tell noobs like me how to "),a("em",[e._v("not")]),e._v(" run it as root, but luckily there's "),a("a",{attrs:{href:"https://snipe.net/2017/11/15/so-you-ran-composer-as-root/",target:"_blank",rel:"noopener noreferrer"}},[e._v("this"),a("OutboundLink")],1),e._v(" really great blog post on how stop running Composer as root.")]),e._v(" "),a("h2",{attrs:{id:"_3-packagist-is-a-better-place-to-find-packages-than-google"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-packagist-is-a-better-place-to-find-packages-than-google"}},[e._v("#")]),e._v(" 3. "),a("a",{attrs:{href:"https://packagist.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Packagist"),a("OutboundLink")],1),e._v(" is a better place to find packages than Google")]),e._v(" "),a("p",[e._v("I used to use Google to find php packages for my projects, but once I found Packagist, I never looked back. "),a("a",{attrs:{href:"https://packagist.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Packagist"),a("OutboundLink")],1),e._v(" is the main repository for Composer packages and unless you're using internal company packages, all of your Composer packages would probably be downloaded from Packagist (even if you don't know about it!). Packagist's search functionality isn't half bad and using it to find packages is much more effective than using an ordinary search engine.")]),e._v(" "),a("p",[e._v("Simply search for keywords and Packagist will show you matching packages. The search listings make it easy for you to see how many times each package has been installed. Clicking on a search result takes you to the package's page where you can see it's dependencies, README file, available releases and link to it's source repository.")]),e._v(" "),a("h2",{attrs:{id:"_4-never-modify-anything-inside-the-vendor-folder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-never-modify-anything-inside-the-vendor-folder"}},[e._v("#")]),e._v(" 4. Never modify anything inside the "),a("code",[e._v("vendor")]),e._v(" folder")]),e._v(" "),a("p",[e._v("If you edit anything in your "),a("code",[e._v("vendor")]),e._v(" directory your edits will be overwritten the next time you run "),a("code",[e._v("composer update")]),e._v(". If you want modify a package (which I highly encourage for learning and contributing purposes!) rather create a fork of the package's repository and make your changes on a new branch. To find the package's repository, simply type "),a("code",[e._v("composer home vendor/package-name")]),e._v(" in your console. You can add your forked repository as a "),a("a",{attrs:{href:"https://getcomposer.org/doc/05-repositories.md#repository",target:"_blank",rel:"noopener noreferrer"}},[e._v('"repository"'),a("OutboundLink")],1),e._v(" in your "),a("code",[e._v("composer.json")]),e._v(" file and you can use your branch as the package's version requirement. That way your team mates can also use your modified version of the package. To install your package, simply run "),a("code",[e._v("composer update")]),e._v(".")]),e._v(" "),a("p",[e._v("If you later create a pull request from your branch to the package's main repository and it gets merged, you can simply change the version requirement for the package in your "),a("code",[e._v("composer.json")]),e._v(" file back to the package's latest version. Have a look at this "),a("a",{attrs:{href:"https://stackoverflow.com/questions/55294339/composer-require-a-specific-pull-request/55307273#55307273",target:"_blank",rel:"noopener noreferrer"}},[e._v("StackOverflow question"),a("OutboundLink")],1),e._v(" for an example of a scenario like this.")]),e._v(" "),a("h2",{attrs:{id:"_5-you-should-almost-always-run-composer-install-after-changing-to-another-branch-or-pulling-from-a-remote-branch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-you-should-almost-always-run-composer-install-after-changing-to-another-branch-or-pulling-from-a-remote-branch"}},[e._v("#")]),e._v(" 5. You should (almost) always run "),a("code",[e._v("composer install")]),e._v(" after changing to another branch or pulling from a remote branch")]),e._v(" "),a("p",[e._v("When you switch branches or pull from a remote branch there's a chance that the "),a("code",[e._v("composer.lock")]),e._v(" file your getting is different from the one you had before. To ensure that your environment is in the same state that the environment on which the commit you checked out was tested on, you need to run "),a("code",[e._v("composer install")]),e._v(". Luckily "),a("a",{attrs:{href:"https://githooks.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("git hooks"),a("OutboundLink")],1),e._v(" can do that for us automatically whenever the "),a("code",[e._v("composer.lock")]),e._v(" file has changed.")]),e._v(" "),a("p",[e._v("To check for changes to the "),a("code",[e._v("composer.lock")]),e._v(" file and run "),a("code",[e._v("composer install")]),e._v(" when you switch branches, simply copy and paste the following code (that I modified from this "),a("a",{attrs:{href:"https://gist.github.com/sindresorhus/7996717",target:"_blank",rel:"noopener noreferrer"}},[e._v("gist"),a("OutboundLink")],1),e._v(") to a new file called "),a("code",[e._v("post-merge")]),e._v(" in your "),a("code",[e._v(".git/hooks")]),e._v(" directory in your project:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("changed_files")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" diff-tree -r --name-only --no-commit-id ORIG_HEAD HEAD"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"')]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[e._v("check_run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$changed_files")]),e._v('"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" -E --quiet "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v('"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("eval")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$2")]),e._v('"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\ncheck_run composer.lock "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'printf \""),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("Running composer install..."),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("\" && composer install'")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("Then run "),a("code",[e._v("chmod +x .git/hooks/post-merge")]),e._v(" to make the file executable.")]),e._v(" "),a("p",[e._v("You can copy the following code to "),a("code",[e._v(".git/hooks/post-checkout")]),e._v(" and make it executable:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("changed_files")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" diff-tree -r --name-only --no-commit-id $1 $2"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"')]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[e._v("check_run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$changed_files")]),e._v('"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" -E --quiet "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v('"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("eval")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$2")]),e._v('"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\ncheck_run composer.lock "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'printf \""),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("Running composer install..."),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("\" && composer install'")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("h2",{attrs:{id:"_6-always-commit-your-composer-lock-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-always-commit-your-composer-lock-file"}},[e._v("#")]),e._v(" 6. Always commit your "),a("code",[e._v("composer.lock")]),e._v(" file")]),e._v(" "),a("p",[e._v("Often when your "),a("code",[e._v("composer.lock")]),e._v(" file has changed it means that you're using a new package that your code now relies on. If you don't commit your "),a("code",[e._v("composer.lock")]),e._v(" file your code might break on your team mates' environments!")]),e._v(" "),a("h2",{attrs:{id:"_7-composer-require-might-not-always-be-your-friend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-composer-require-might-not-always-be-your-friend"}},[e._v("#")]),e._v(" 7. "),a("code",[e._v("composer require")]),e._v(" might not always be your friend")]),e._v(" "),a("p",[a("code",[e._v("composer require vendor/package")]),e._v(" can be handy when you have to add and install a new dependency to your package. It removes the need for you to manually update your "),a("code",[e._v("composer.json")]),e._v(" file and to then run "),a("code",[e._v("composer update")]),e._v(". It even allows you to add multiple packages at once with "),a("code",[e._v("composer require vendor1/package1 vendor2/package2 etc.")]),e._v(". However, sometimes it will tell you that there aren't an available set of packages available when in fact there is.")]),e._v(" "),a("p",[e._v("It isn't exactly Composer's fault that it tells you this, because if you don't specify a version constraint for the package (using "),a("code",[e._v("composer require vendor/package:version-constraint")]),e._v(") it assumes your want the latest minor version. But sometimes the latest versions aren't what you need and a noob like me didn't know that Composer won't be able to figure that out itself.")]),e._v(" "),a("p",[e._v("Let's have a look at "),a("a",{attrs:{href:"https://stackoverflow.com/questions/55265988/composer-cant-seem-to-get-requirements-right/55307628?noredirect=1#comment97344874_55307628",target:"_blank",rel:"noopener noreferrer"}},[e._v("this"),a("OutboundLink")],1),e._v(" question on StackOverflow. The OP wanted to install the "),a("code",[e._v("mailgun/mailgun-php")]),e._v(", "),a("code",[e._v("php-http/curl-client")]),e._v(" and "),a("code",[e._v("guzzlehttp/psr7")]),e._v(" packages. While there were a set of mutually compatible versions of the packages available ("),a("code",[e._v("mailgun/mailgun-php:2.8.1")]),e._v(", "),a("code",[e._v("php-http/curl-client:v1.7.1")]),e._v(" and "),a("code",[e._v("guzzlehttp/psr7:1.5.2")]),e._v("), "),a("code",[e._v("composer require")]),e._v(' failed and told him "Your requirements could not be resolved to an installable set of packages." '),a("code",[e._v("composer require")]),e._v(" tried to install the latest minor versions of each of the packages which was "),a("code",[e._v("mailgun/mailgun-php:^2.8")]),e._v(", "),a("code",[e._v("php-http/curl-client:^2.0")]),e._v(" and "),a("code",[e._v("guzzlehttp/psr7:^1.5")]),e._v(".")]),e._v(" "),a("p",[e._v("Luckily he didn't have to go and manually find a compatible set of dependencies himself. He could specify the lowest versions he'd want like this "),a("code",[e._v('composer require mailgun/mailgun-php:">0" php-http/curl-client:">0" guzzlehttp/psr7:">0"')]),e._v(" and Composer would find the latest set of versions that would satisfy all of the dependencies.")]),e._v(" "),a("h2",{attrs:{id:"_8-keep-the-composer-versions-documentation-close-by-to-refresh-your-understanding-of-package-version-constraints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-keep-the-composer-versions-documentation-close-by-to-refresh-your-understanding-of-package-version-constraints"}},[e._v("#")]),e._v(" 8. Keep the Composer versions "),a("a",{attrs:{href:"https://getcomposer.org/doc/articles/versions.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("documentation"),a("OutboundLink")],1),e._v(" close by to refresh your understanding of package version constraints")]),e._v(" "),a("p",[e._v("This Composer documentation on versions and constraints is very thorough and useful. The two operators that you will often see in "),a("code",[e._v("composer.json")]),e._v(" files, but which aren't very obvious to the untrained eye, is "),a("code",[e._v("~")]),e._v(" ("),a("a",{attrs:{href:"https://getcomposer.org/doc/articles/versions.md#tilde-version-range-",target:"_blank",rel:"noopener noreferrer"}},[e._v("The tilde version range"),a("OutboundLink")],1),e._v(") and "),a("code",[e._v("^")]),e._v(" ("),a("a",{attrs:{href:"https://getcomposer.org/doc/articles/versions.md#caret-version-range-",target:"_blank",rel:"noopener noreferrer"}},[e._v("the caret version range"),a("OutboundLink")],1),e._v(").")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("^")]),e._v(" specifies a range where the minimum version is the version specified and the highest allowed version if the next breaking update (in "),a("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("semantic versioning"),a("OutboundLink")],1),e._v(" terms). For example "),a("code",[e._v("^2.1")]),e._v(" allows versions "),a("code",[e._v(">=2.1")]),e._v(" up to "),a("code",[e._v("<3.0.0")]),e._v(", and "),a("code",[e._v("^1.1.1")]),e._v(" allows versions up to "),a("code",[e._v("<2.0.0")]),e._v(".")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("~")]),e._v(" operator is similar, but it basically looks at the last specified digit in the version and allows only it to go up, but not the digits before it. For example "),a("code",[e._v("~1.2")]),e._v(" can go up to anything below "),a("code",[e._v("2.0.0")]),e._v(", but "),a("code",[e._v("~1.1.2")]),e._v(" can only go up to anything below "),a("code",[e._v("1.2")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"_9-lastly-run-composer-self-update-once-in-a-while"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-lastly-run-composer-self-update-once-in-a-while"}},[e._v("#")]),e._v(" 9. Lastly, run "),a("code",[e._v("composer self-update")]),e._v(" once in a while")]),e._v(" "),a("p",[a("code",[e._v("composer self-update")]),e._v(" is a handy command that updates your Composer installation itself and allows you to use the newest, shiniest version of Composer.")])],1)}),[],!1,null,null,null);t.default=s.exports}}]);